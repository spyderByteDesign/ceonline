<?php
/**
 * @file
 * @copyright Copyright (c) 2014 Spyder Byte Design LLC
 */


/**
 * Implements hook_menu().
 */
function ceo_certification_accreditation_menu() {
  $items = array();

  // Callback for adding credits to a user.
  // Args: UID, Video ID, Credits obtained.
  $items["ceo_certification_accreditation/credit"] = array(
    'title' => 'Add Credit to User',
    'description' => 'Menu callback for adding credit to user.',
    'access callback' => 'ceo_certification_credit_access',
    'page callback' => 'ceo_certification_add_credit',
    'type' => MENU_CALLBACK,
  );

  // Callback for when a video is completed.
  // Args: UID, Video ID.
  $items['ceo_certification_accreditation/completion'] = array(
    'title' => 'Video Completion Callback',
    'description' => 'Performs tasks related to video completion.',
    'access callback' => 'ceo_certification_completion_access',
    'page callback' => 'ceo_certification_completion',
    'type' => MENU_CALLBACK,
  );

  // Page for configuring the module.
  $items['admin/config/system/ceo-certification-administration'] = array(
    'title' => 'CEO Administration Settings',
    'description' => 'Settings for the certification/accreditation module.',
    'access arguments' => array('ceo_certification_completion_administration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ceo_certification_accreditation_administration_form'),
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function ceo_certification_accreditation_permission() {
  $return = array();

  $return['ceo_certification_completion_administration'] = array(
    'title' => t('CEO Certification Administration'),
    'description' => t('Administer settings for the certification/accreditation module'),
  );

  return $return;
}

/**
 * Provides function to determine access at a later date if desired.
 */
function ceo_certification_credit_access() {
  return TRUE;
}

/**
 * Provides function to determine access at a later date if desired.
 */
function ceo_certification_completion_access() {
  return TRUE;
}

/**
 * Implements hook_preprocess_node().
 */
function ceo_certification_accreditation_preprocess_node(&$variables) {
  global $user;

  // If the user is logged in, check their status.
  if ($user->uid != 0) {
    // If the course for the node hasn't been determined yet, get the course.
    if (empty($variables['course_term'])) {
      $variables['course_term'] = taxonomy_get_term_by_name($variables['title']);
    }
    // If course was successfully obtained and credits haven't been determine.
    if (!empty($variables['course_term']) && empty($variables['credits_obtained'])) {
      $credits_obtained = 0;
      // Get all credits obtained towards a given course.
      foreach ($variables['course_term'] as $value) {
        $query = db_select('ceo_certification_accreditation', 'ca')
          ->fields('ca', array('credits'))
          ->condition('ca.uid', $user->uid)
          ->condition('ca.cid', $value->tid);
        $results = $query->execute()->fetchAll();
        if (!empty($results)) {
          // Add all the values together.
          foreach ($results as $value) {
            $credits_obtained += $value->credits;
          }
        }
        // Make the credits obtained available to other areas.
        $variables['credits_obtained'] = $credits_obtained;
      }
    }
  }
}

/**
 * Adds credit to a user for having watched a video.
 *
 * @param int $user
 *   The user id of the user who needs crediting.
 * @param int $video_node
 *   ID of the video being given credit for.
 * @param int $credits
 *   Credits received for the video.
 *
 * @return bool
 *   True if successful, false otherwise.
 */
function ceo_certification_add_credit($user = NULL, $video_node = NULL, $credits = 1) {
  if (!empty($user) && !empty($video_node)) {
    // Check to be sure the user doesn't already have credit for this video.
    $query = db_select('ceo_certification_accreditation', 'ca')
      ->fields('ca', array('aid'))
      ->condition('ca.uid', $user)
      ->condition('ca.vid', $video_node);
    $results = $query->execute()->fetchAll();
    if (empty($results)) {
      // Get the training course a given video is part of.
      $course_results = ceo_certification_course_determination($video_node);
      if (!empty($course_results)) {
        // Give the user credit for completing the video.
        $insert = db_insert('ceo_certification_accreditation')
          ->fields(array(
            'uid' => $user,
            'vid' => $video_node,
            'cid' => $course_results['field_training_course_tid'],
            'credits' => $credits,
            'date_obtained' => date('Y-m-d H-m-s'),
          ))
          ->execute();

        // If successful, return a message indicating success.
        if ($insert == TRUE) {
          return t("Credit successfully applied.");
        }
        // Insert failed.
        else {
          return t("Insert failed for unknown reasons. Check PHP error log.");
        }
      }
      // Course determining query failed.
      else {
        return t("Could not determine course for video");
      }
    }
    // User already has credit for course.
    else {
      return t("User already has credit for this course");
    }
  }
  // Missing URL parameters.
  else {
    return t("User or video ID not supplied.");
  }

}

/**
 * Provides functionality related to video completion.
 *
 * @param int $user_id
 *   ID of user who completed the video.
 * @param int $video_node_id
 *   The video that was completed.
 *
 * @return string
 *   Success message or failure explanation.
 */
function ceo_certification_completion($user_id = NULL, $video_node_id = NULL) {
  if (!empty($user_id) && !empty($video_node_id)) {
    // Determine the course a video is part of.
    // Returns an array where key 'field_training_course_tid' is the course tid.
    $course_results = ceo_certification_course_determination($video_node_id);

    // Determine how many credits the user has for this course.
    // Returns an array where key 'credits' is how many credits the user has.
    $course_credits = ceo_certification_course_credit_check($user_id, $course_results['field_training_course_tid']);

    if (!empty($course_credits['credits']) && $course_credits['credits'] >= 6) {
      $path = 'node/add/eoc-evaluation/' . $course_results['field_training_course_tid'];
      drupal_goto($path);
    }
    // If there are no credits found.
    else {
      return t("No credits found for this course/user combination.");
    }
  }
  // Missing URL parameter.
  else {
    return t("User or video ID not supplied.");
  }
}


/**
 * Determines the course a given video is a part of.
 *
 * @param int $video_node
 *   The video ID you want the course of.
 *
 * @return array
 *   Results of query in an associative array.
 */
function ceo_certification_course_determination($video_node) {
  $course = db_select('field_data_field_training_course', 'tc')
    ->condition('entity_id', $video_node)
    ->fields('tc', array('field_training_course_tid'));
  $course_results = $course->execute()->fetchAssoc();

  return $course_results;
}


/**
 * Determines how many credits a given user has for a given course.
 *
 * No "credit check" pun intended.
 *
 * @param int $uid
 *   User ID.
 * @param int $course_id
 *   Course ID.
 */
function ceo_certification_course_credit_check($uid, $course_id) {
  $query = db_select('ceo_certification_accreditation', 'ca')
    ->fields('ca', array('credits'))
    ->condition('uid', $uid)
    ->condition('cid', $course_id);
  $results = $query->execute()->fetchAssoc();

  return $results;
}


/**
 * Implements hook_form_alter().
 */
function ceo_certification_accreditation_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'eoc_evaluation_node_form') {
    $args = arg();
    if (!empty($args['3'])) {
      $form['field_training_course']["und"]['#default_value'] = $args['3'];
      $form['field_training_course']['#disabled'] = TRUE;
    }
  }
}


/**
 * Implements hook_cron().
 */
function ceo_certification_accreditation_cron() {
  $update_status = variable_get('ceo_notify_usc', TRUE);


  // Every even week on saturday night, flag as needing update.
  if (date('W') % 2 == 0 && date('D') == 'Sat' && $update_status == FALSE) {
    variable_set('ceo_notify_usc', TRUE);
  }
  // Every even week on Sunday night, sent notifications and flag as sent.
  if (date('W') % 2 == 0 && date('D') == 'Sun' && date('H') > 18 && $update_status == TRUE) {
    // @todo Provide a better default!!
    $usc_email = variable_get('ceo_alert_destination', 'test@domain.com');
    $params['files'][] = _ceo_certification_accreditation_notification_generate();
    drupal_mail('ceo_certification_accreditation', 'ceo_certification_accreditation_usc_notification', $usc_email, 'und', $params);
    variable_set('ceo_notify_usc', TRUE);
  }



}

/**
 * Implements hook_mail().
 */
function ceo_certification_accreditation_mail($key, &$message, $params) {
  switch ($key) {
    case 'ceo_certification_accreditation_usc_notification':
      $message['subject'] = 'Users who have recently been accredited.';
      $message['body'][] = t('Attached are the students who have received
        accreditation within the last two weeks. Thank you!');
      break;
  }
}


/**
 * Generates the file which is included in the notification email.
 */
function _ceo_certification_accreditation_notification_generate() {
  $notifications_needed = array(
    'User Name',
    'User ID on Site',
    'Course Passed',
    'Date Completed',
  );
  $output = implode(',', $notifications_needed) . "\r\n";
  $notification_query = db_select('ceo_certification_notification', 'cn')
    ->condition('usc_notification_status', 0)
    ->fields('cn', array('uid', 'cid', 'date_obtained'));
  $notification_results = $notification_query->execute()->fetchAll();

  foreach ($notification_results as $value) {
    $row = array();
    $user = user_load($value->uid);
    $term = taxonomy_term_load($value->cid);

    $row[] = $user->field_first_name['und']['0']['value'] . ' '
      . $user->field_middle_name['und']['0']['value'] . ' '
      . $user->field_last_name['und']['0']['value'];
    $row[] = $user->uid;
    $row[] = $term->name;
    $row[] = $value->date_obtained;

    $output .= implode(',', $row) . "\r\n";

  }

  $file_path = 'accreditation_exports/' . date('m-d-Y') . '_accredited_users.csv';
  $destination = 'public://' . $file_path;

  $file = file_save_data($output, $destination, FILE_EXISTS_RENAME);

  return $file;
}


/**
 * Implements hook_node_insert().
 */
function ceo_certification_accreditation_node_insert($node) {
  // On completion of the end of course test, file that the user has credit
  // for the course.
  if ($node->type == 'eoc_evaluation') {
    db_insert('ceo_certification_notification')
      ->fields(array(
        'uid' => $node->uid,
        'cid' => $node->field_training_course['und']['0']['tid'],
        'date_obtained' => date('Y-m-d H-m-s'),
      ))
      ->execute();
  }
}

/**
 * CEO Certification/Administration Form.
 */
function ceo_certification_accreditation_administration_form($form, &$form_state) {
  $form['ceo_alert_destination'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Alert Email Address'),
    '#description' => t('Please provide an email address to send alerts to.'),
    '#default_value' => variable_get('ceo_alert_destination', 'test@domain.com'),
  );

  return system_settings_form($form);
}

/**
 * Validate callback for CEO Certification/Administration Form.
 */
function ceo_certification_accreditation_administration_form_validate(&$form, &$form_state) {
  $email_validation = filter_var($form_state['values']['ceo_alert_destination'], FILTER_VALIDATE_EMAIL);
  if ($email_validation === FALSE) {
    form_set_error('ceo_alert_destination', t('Please provide a valid email address'));
  }
}

/**
 * Submit callback for CEO Certification/Administration Form.
 */
function ceo_certification_accreditation_administration_form_submit(&$form, &$form_state) {
}
